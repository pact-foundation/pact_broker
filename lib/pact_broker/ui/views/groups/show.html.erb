<% require 'sanitize' %>
<% require 'pact_broker/version' %>
<% version = PactBroker::VERSION %>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title><%= escape_html(pacticipant_name) %></title>
<link rel='shortcut icon' href='<%= base_url %>/favicon.ico' type='image/x-icon'/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="Duncan Alexander">
<script type="text/javascript" src="<%= base_url %>/javascripts/d3.v3.js.pagespeed.ce.dFNRrGTALe.js"></script>
<link href="<%= base_url %>/css/bootstrap.min.css?v=<%= version %>" rel="stylesheet">
<script src="<%= base_url %>/javascripts/jquery-3.5.1.min.js?v=<%= version %>" type='text/javascript'></script>
<script src="<%= base_url %>/js/bootstrap.bundle.min.js?v=<%= version %>" type='text/javascript'></script>
<style>
body {
  padding-top: 10px;
}
svg{
    font-family:"Helvetica Neue",Arial,sans-serif;
    font-size:.95em;
    font-weight:bold;
    padding:2em
}
.pacticpantLabel {
    cursor: default
 }
 .relationship {
    cursor: pointer;
 }
 .page-header {
   padding-bottom: 9px;
   margin: 40px 0 20px;
   border-bottom: 1px solid #eee;
 }
</style>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
<!-- developed by Duncan Alexander - hypothete.com -->
</head>
<body>
<div class="container">
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item" style="margin:0;"><a href="<%= base_url %>/">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page"><%= escape_html(pacticipant_name) %></li>
  </ol>
</nav>
<h1 class="page-header"><%= escape_html(pacticipant_name) %></h1>

<ul class="nav nav-tabs">
  <li class="nav-item">
    <a class="nav-link <%= tab == "details" ? "active" : "" %>" href="<%= details_url %>">Details</a>
  </li>
  <li class="nav-item">
    <a class="nav-link <%= tab == "network" ? "active" : "" %>" href="<%= network_url %>">Network Graph</a>
  </li>
</ul>

<% if tab == "details" %>
  <div class="container mt-5">
    <div class="row">
      <div class="col col-md-2">
        Main branch:
      </div>
      <div class="col col-md-6">
        <%= escape_html(pacticipant.main_branch) %>
      </div>
    </div>
    <div class="row">
      <div class="col col-md-2">
        Repository URL:
      </div>
      <div class="col col-md-6">
          <% if repository_url %>
              <%
              repository_link = "<a href=\"#{repository_url}\">#{repository_url}</a>"
              %>

              <%= Sanitize.fragment(repository_link, Sanitize::Config::BASIC) %>
          <% end %>
      </div>
    </div>
  </div>
<% end %>

<% if tab == "network" %>
<script type="text/javascript">
var windowWidth, windowHeight, svg;

var enlargeCanvasToFit = function (radius) {
    //Make SVG canvas bigger if it won't fit
    if (3 * radius > windowWidth) {
        windowWidth = 3 * radius;
        svg.attr("width", windowWidth);
    }
    if (3.5 * radius > windowHeight) {
        windowHeight = 3.5 * radius;
        svg.attr("height", windowHeight);
    }
};

var parseCSV = function (data) {
    var pacticipants = [];
    data.forEach(
        function(row) {
            var pacticipant = {
                id: row[0],
                pacticipantName: row[1],
                order: parseInt(row[5]),
                connectedPacticipantIds: row.slice(6).filter(function(e) {
                    if (parseInt(e) != NaN && parseInt(e) > 0) {
                        return e;
                    }
                })
            };

            pacticipants.push(pacticipant);
        });
    pacticipants.sort(function(a, b) {
        return d3.ascending(a.order, b.order);
    });
    return pacticipants;
};

var getPacticipantNames = function (pacticipants) {
    return pacticipants.map(function(p){ return p.pacticipantName });
};

var relationshipPath = function(relationship, nodeLocations, pacticipants) {
    var dx = nodeLocations[relationship.endId].x - nodeLocations[relationship.startId].x;
    var dy = nodeLocations[relationship.endId].y - nodeLocations[relationship.startId].y;
    var dr = Math.sqrt(dx * dx + dy * dy);
    var inout = 1;

    var indexOfEndGreaterThanIndexOfStart = nodeLocations[relationship.endId].i > nodeLocations[relationship.startId].i;
    var differenceBetweenStartAndEndIndexes = Math.abs(nodeLocations[relationship.endId].i - nodeLocations[relationship.startId].i);
    var indexOfEndLessThanIndexOfStart = nodeLocations[relationship.endId].i < nodeLocations[relationship.startId].i

    if ((indexOfEndGreaterThanIndexOfStart && differenceBetweenStartAndEndIndexes <= pacticipants.length / 2) || (indexOfEndLessThanIndexOfStart && differenceBetweenStartAndEndIndexes > pacticipants.length / 2)) {
        inout = 0;
    }
    return "M" + 0 + "," + 0 + "A" + dr + ", " + dr + " 0 0," + inout + " " + dx + "," + dy;
};

var latestPactUrl = function (consumerName, providerName) {
    //TODO send this with the relationship data
    return '<%= base_url %>' + '/pacts/provider/' + encodeURIComponent(providerName) + '/consumer/' + encodeURIComponent(consumerName) + '/latest';
};

var relationshipData = function(pacticipant, relationships) {
    var relationshipsInvolvingPacticipant = [];
    var relationshipLinks = [];
    relationships.forEach(function(relationship) {
        var dummyRelationship = {};
        dummyRelationship.id = relationship.id;
        if (relationship.consumerId == pacticipant.id) {
            dummyRelationship.startId = relationship.consumerId;
            dummyRelationship.endId = relationship.providerId;
            if (relationship.relationshipType) {
                dummyRelationship.relationshipType = relationship.relationshipType;
            } else {
                dummyRelationship.relationshipType = 'consumer';
            }
            dummyRelationship.href = relationship.href;
            relationshipsInvolvingPacticipant.push(dummyRelationship);
            var relationshipLink = {};
            relationshipLink.startId = relationship.consumerId;
            relationshipLink.endId = relationship.providerId;
            relationshipLink.relationshipType = 'link';
            relationshipLink.href = relationship.href;
            relationshipLink.id = relationship.id;
            relationshipLinks.push(relationshipLink);
        }
        else if (relationship.providerId == pacticipant.id) {
            dummyRelationship.startId = relationship.providerId;
            dummyRelationship.endId = relationship.consumerId;
            if (relationship.relationshipType) {
                dummyRelationship.relationshipType = relationship.relationshipType;
            } else {
                dummyRelationship.relationshipType = 'provider';
            }
            dummyRelationship.href = relationship.href;
            relationshipsInvolvingPacticipant.push(dummyRelationship);
        }
    });
    return relationshipLinks.concat(relationshipsInvolvingPacticipant);
};

var createRelationships = function (pacticipants) {
    var relationships = [];
    var findPacticipantById = function (id) {
        return pacticipants.filter(function (pacticipant) {
            return pacticipant.id == id;
        })[0];
    };
    pacticipants.forEach(function(d) {
        d.connectedPacticipantIds.forEach(function(connectedPacticipantId) {
            relationships.push(
            {
                id: ['c', d.id, 'p', connectedPacticipantId].join(''),
                consumerId: d.id,
                providerId: connectedPacticipantId,
                href: latestPactUrl(d.pacticipantName, findPacticipantById(connectedPacticipantId).pacticipantName)
            }
            );
        });
    });

    relationships.sort(function(a, b) {
        return d3.ascending(a.consumerId, b.providerId);
    });
    return relationships;

};

var transformPacticipantNode = function (d, i, radius, pacticipants, nodeLocations) {
    //Node locations - makes the big circle
    var x = radius * Math.cos(2 * Math.PI * (i / pacticipants.length)) + windowWidth / 2;
    var y = radius * Math.sin(2 * Math.PI * (i / pacticipants.length)) + windowHeight / 2;
    nodeLocations[d.id] = {
        x: x,
        y: y,
        i: i
    };
    return "translate(" + x + "," + y + ")";
};

var relationshipColour = function(relationship) {
    return "gray";
};

var fadeAllRelationships = function() {
    svg.selectAll(".relationship.visible")
        .transition()
        .duration(TRANSITION_TIME)
        .attr("opacity", OPACITY_FADED)
        .attr("stroke-width", RELATIONSHIP_STROKE_FADED);
};

var boldRelationships = function(relationships) {
    relationships.transition()
        .duration(TRANSITION_TIME)
        .attr("opacity", OPACITY_DARK)
        .attr("stroke-width", RELATIONSHIP_STROKE_DARK);
};

var normalizeRelationships = function() {
    svg.selectAll(".relationship.visible")
        .transition()
        .duration(TRANSITION_TIME)
        .attr("stroke-width", RELATIONSHIP_STROKE_NORMAL)
        .attr("opacity", OPACITY_NORMAL);
};

var pacticipantMouseover = function() {
    fadeAllRelationships();
    boldRelationships(
        d3.select(this.parentNode)
            .selectAll(".relationship.visible"));
};
var pacticipantMouseout = function() {
    normalizeRelationships();
};

var relationshipMouseover = function(relationship) {
    fadeAllRelationships();
    boldRelationships( svg.selectAll("." + relationship.id + ".visible") );
};

var relationshipMouseout = function() {
    normalizeRelationships();
};

var relationshipOnclick = function(relationship) {
    location.href = relationship.href;
};

var textContent = function(d, i) { return this.parentNode.className.animVal; };

var OPACITY_FADED = 0.3; //0.1;
var OPACITY_NORMAL = 0.75; //0.75;
var OPACITY_DARK = 1;
var RELATIONSHIP_STROKE_DARK = 1;
var RELATIONSHIP_STROKE_NORMAL = 0.75;
var RELATIONSHIP_STROKE_FADED = 0.35;
var TRANSITION_TIME = 400;

window.onload = function() {
    var titleHeight = 250;
    windowWidth = window.innerWidth - titleHeight;
    windowHeight = window.innerHeight;
    svg = d3.select("body").append("svg").attr("width", windowWidth).attr("height", windowHeight).attr("version", 1.1).attr("xmlns", "http://www.w3.org/2000/svg");
    var pacticipants = [];
    var maxrad = 0;
    var pacticipantNameArray = [];
    var circleMinRadius = 200;


    var defs = svg.append('defs');
        defs.append("marker")
        .attr("id", "arrowGrayStart")
        .attr("viewBox","0 0 10 10")
        .attr("refX","10")
        .attr("refY","5")
        .attr("markerUnits","strokeWidth")
        .attr("markerWidth","15")
        .attr("markerHeight","15")
        .attr("orient","auto")
        .append("path")
        .attr("d","M 0 0 L 10 5 L 0 10 z")
        .attr("fill", "#A0A0A0");

    defs.append("marker")
        .attr("id", "arrowGrayEnd")
        .attr("viewBox","0 0 10 10")
        .attr("refX","0")
        .attr("refY","5")
        .attr("markerUnits","strokeWidth")
        .attr("markerWidth","15")
        .attr("markerHeight","15")
        .attr("orient","auto")
        .append("path")
        .attr("d","M 10 0 L 10 10 L 0 5 z")
        .attr("fill", "#A0A0A0");

    const maxPacticipants = new URL(location).searchParams.get("maxPacticipants") || <%= max_pacticipants %>;

    d3.text(`<%= csv_path %>?maxPacticipants=${maxPacticipants}`, "text/csv", function(unparsedData) {
        var data=d3.csv.parseRows(unparsedData);
        pacticipants = parseCSV(data);
        pacticipantNameArray = getPacticipantNames(pacticipants);

        var nodeLocations = {};
        var radius = Math.max(circleMinRadius, pacticipants.length * 2.5);

        enlargeCanvasToFit(radius, windowWidth, windowHeight, svg);

        maxrad = (radius * Math.PI / pacticipants.length) + 2;
        var g = svg.selectAll("g").data(pacticipants).enter().append("g").attr("transform", function(d, i) {
            return transformPacticipantNode(d, i, radius, pacticipants, nodeLocations);
        }).attr("id", function(d, i) {
            return i;
        }).attr("class", function(pacticipant) {
            return pacticipant.pacticipantName;
        });

        relationships = createRelationships(pacticipants);

        g.selectAll("path")
            .data(function(pacticipant){ return relationshipData(pacticipant, relationships); }).enter()
            .append("path")
            .attr("d", function(relationship){ return relationshipPath(relationship, nodeLocations, pacticipants); })
            .attr("class", function(relationship) {
                var clazz = relationship.id + " " + relationship.relationshipType + " relationship";
                if(relationship.relationshipType !== 'link') {
                    clazz += ' visible';
                }
                return clazz;
            })
            .attr("fill", "none");

        g.selectAll(".consumer, .provider")
            .attr("stroke", relationshipColour)
            .attr("stroke-width", RELATIONSHIP_STROKE_NORMAL)
            .attr("opacity", OPACITY_NORMAL);

        g.selectAll(".relationship.link")
            .attr("stroke-width", 14)
            .attr("opacity", 0)
            .attr("stroke", 'white');

        g.selectAll(".relationship")
            .on("click", relationshipOnclick)
            .on("mouseover", relationshipMouseover)
            .on("mouseout", relationshipMouseout);


        svg.selectAll(".consumer").attr("marker-end", "url(#arrowGrayStart)");
        svg.selectAll(".provider").attr("marker-start", "url(#arrowGrayEnd)");

        var pacticipantColour = d3.scale.category10().domain([0, pacticipants.length]);

        var onRight = function (i) {
            return i <= pacticipants.length / 4 || i >= pacticipants.length * 3 / 4;
        };

        var textFill = function(pacticipant) {
            return pacticipantColour(pacticipant.order);
        }

        var circleXOffset = function(d, i) {
            //controls the positioning in regards to the edge of the circle
            return 6 * Math.cos(2 * Math.PI * i / pacticipants.length);
        };

        var circleYOffset = function(d, i) {
            //controls the positioning in regards to the edge of the circle
            return 6 * Math.sin(2 * Math.PI * i / pacticipants.length);
        };

        var circles = g.append("circle")
        .attr("r", function(pacticipant) { return 6; })
        .attr("fill", textFill)
        .attr("stroke", textFill)
        .attr("stroke-width", 2)
        .attr("cx", circleXOffset)
        .attr("cy", circleYOffset);

        var textAnchor = function(d, i) {
            if (onRight(i)) {
                return "start";
            } else {
                return "end";
            }
        };

        var textXOffset = function(d, i) {
            //controls the positioning in regards to the edge of the circle
            return 40 * Math.cos(2 * Math.PI * i / pacticipants.length);
        };

        var isFinite = function(num) {
            return !(num == Number.POSITIVE_INFINITY || num == Number.NEGATIVE_INFINITY)
        };


        var textYOffset = function(d, i) {
            var thing = 4 * Math.PI * i / pacticipants.length;
            var counterOffset = 0;

            counterOffset = (0.2 / (20 * Math.tan(thing/2))) * 1000;

            if(!isFinite(counterOffset)) { //Right, middle node
                counterOffset = 0;
            } else {
                //Near the asymptotes, it gets bigger really quickly, if it's a big number,
                //it's likely it should actually be on the asymptote, and therefore, have no counterOffset
                if(Math.abs(counterOffset) > 30) {
                    //Left, middle node
                    counterOffset = 0;
                }
            }

            return (40 * Math.sin(2 * Math.PI * i / pacticipants.length)) - counterOffset;
        };

        var textYOffset2 = function(d, i) {
            return (40 * Math.sin(2 * Math.PI * i / pacticipants.length));
        };

        var text = g.append("text").text(textContent)
        .attr("x", function(d, i) { return textXOffset(d, i, maxrad); })
        .attr("y", function(d, i) { return textYOffset(d, i, maxrad); })
        .attr("text-anchor", textAnchor)
        .attr("fill", textFill)
        // .attr("font-size", function(){ return 15; });
        .attr("class", function() { return "pacticpantLabel"; });

        circles.on("mouseover", pacticipantMouseover).on("mouseout", pacticipantMouseout);
        text.on("mouseover", pacticipantMouseover).on("mouseout", pacticipantMouseout);

    });
}</script>
<% end %>
</body>
</html>